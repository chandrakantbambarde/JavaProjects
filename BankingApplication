import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

// Transaction class to store transaction history
class Transaction implements Serializable {
    private static final long serialVersionUID = 1L;
    private String type;
    private double amount;
    private String timestamp;
    private String description;

    public Transaction(String type, double amount, String description) {
        this.type = type;
        this.amount = amount;
        this.description = description;
        this.timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    }

    @Override
    public String toString() {
        return String.format("%-12s | %-10.2f | %-19s | %s", type, amount, timestamp, description);
    }
}

// Account class representing individual bank accounts
class Account implements Serializable {
    private static final long serialVersionUID = 1L;
    private String name;
    private String mobile;
    private String gender;
    private int accountNumber;
    private String password;
    private double balance;
    private List<Transaction> transactionHistory;
    private LocalDateTime createdDate;

    public Account(String name, String mobile, String gender, int accountNumber, String password, double initialBalance) {
        this.name = name;
        this.mobile = mobile;
        this.gender = gender;
        this.accountNumber = accountNumber;
        this.password = password;
        this.balance = initialBalance;
        this.transactionHistory = new ArrayList<>();
        this.createdDate = LocalDateTime.now();

        if (initialBalance > 0) {
            addTransaction("DEPOSIT", initialBalance, "Account opening deposit");
        }
    }

    // Getters
    public String getName() { return name; }
    public String getMobile() { return mobile; }
    public String getGender() { return gender; }
    public int getAccountNumber() { return accountNumber; }
    public double getBalance() { return balance; }
    public List<Transaction> getTransactionHistory() { return transactionHistory; }
    public LocalDateTime getCreatedDate() { return createdDate; }

    // Password verification
    public boolean verifyPassword(String password) {
        return this.password.equals(password);
    }

    // Transaction methods
    public boolean deposit(double amount) {
        if (amount <= 0) {
            System.out.println("Invalid amount! Amount must be greater than 0.");
            return false;
        }
        balance += amount;
        addTransaction("DEPOSIT", amount, "Cash deposit");
        return true;
    }

    public boolean withdraw(double amount) {
        if (amount <= 0) {
            System.out.println("Invalid amount! Amount must be greater than 0.");
            return false;
        }
        if (amount > balance) {
            System.out.println("Insufficient balance! Available balance: " + balance);
            return false;
        }
        balance -= amount;
        addTransaction("WITHDRAW", amount, "Cash withdrawal");
        return true;
    }

    public boolean transfer(double amount, Account toAccount) {
        if (amount <= 0) {
            System.out.println("Invalid amount! Amount must be greater than 0.");
            return false;
        }
        if (amount > balance) {
            System.out.println("Insufficient balance! Available balance: " + balance);
            return false;
        }

        balance -= amount;
        toAccount.balance += amount;

        addTransaction("TRANSFER", amount, "Transfer to A/C: " + toAccount.getAccountNumber());
        toAccount.addTransaction("TRANSFER", amount, "Transfer from A/C: " + this.accountNumber);

        return true;
    }

    private void addTransaction(String type, double amount, String description) {
        transactionHistory.add(new Transaction(type, amount, description));
    }

    public void calculateInterest(double interestRate) {
        double interest = balance * (interestRate / 100);
        balance += interest;
        addTransaction("INTEREST", interest, "Interest credited @ " + interestRate + "%");
    }

    @Override
    public String toString() {
        return String.format("A/C: %-8d | %-20s | %-12s | Balance: ‚Çπ%.2f",
                accountNumber, name, mobile, balance);
    }
}

// Main Bank class managing all operations
class Bank implements Serializable {
    private static final long serialVersionUID = 1L;
    private List<Account> accounts;
    private int nextAccountNumber;
    private static final String DATA_FILE = "bank_data.ser";
    private static final String ADMIN_PASSWORD = "admin123";

    public Bank() {
        accounts = new ArrayList<>();
        nextAccountNumber = 100001;
        loadData();
    }

    // Account creation
    public boolean createAccount(String name, String mobile, String gender, String password, double initialBalance) {
        // Check if mobile number already exists
        for (Account acc : accounts) {
            if (acc.getMobile().equals(mobile)) {
                System.out.println("Account with this mobile number already exists!");
                return false;
            }
        }

        Account newAccount = new Account(name, mobile, gender, nextAccountNumber++, password, initialBalance);
        accounts.add(newAccount);
        saveData();

        System.out.println("\n‚úÖ Account created successfully!");
        System.out.println("Account Number: " + newAccount.getAccountNumber());
        System.out.println("Account Holder: " + newAccount.getName());
        System.out.println("Initial Balance: ‚Çπ" + newAccount.getBalance());

        return true;
    }

    // Login verification
    public Account login(int accountNumber, String password) {
        for (Account acc : accounts) {
            if (acc.getAccountNumber() == accountNumber && acc.verifyPassword(password)) {
                return acc;
            }
        }
        return null;
    }

    // Find account by account number
    public Account findAccount(int accountNumber) {
        for (Account acc : accounts) {
            if (acc.getAccountNumber() == accountNumber) {
                return acc;
            }
        }
        return null;
    }

    // Admin functions
    public boolean adminLogin(String password) {
        return ADMIN_PASSWORD.equals(password);
    }

    public void displayAllAccounts() {
        if (accounts.isEmpty()) {
            System.out.println("No accounts found!");
            return;
        }

        System.out.println("\n" + "=".repeat(70));
        System.out.println("                        ALL BANK ACCOUNTS");
        System.out.println("=".repeat(70));

        for (Account acc : accounts) {
            System.out.println(acc);
        }
        System.out.println("=".repeat(70));
        System.out.println("Total Accounts: " + accounts.size());
    }

    public void calculateInterestForAll(double interestRate) {
        System.out.println("\nCalculating interest @ " + interestRate + "% for all accounts...");
        for (Account acc : accounts) {
            double oldBalance = acc.getBalance();
            acc.calculateInterest(interestRate);
            System.out.println("A/C " + acc.getAccountNumber() + ": ‚Çπ" + oldBalance + " ‚Üí ‚Çπ" + acc.getBalance());
        }
        saveData();
        System.out.println("Interest calculation completed for all accounts!");
    }

    // Data persistence methods
    private void saveData() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(DATA_FILE))) {
            oos.writeObject(this);
            System.out.println("Data saved successfully.");
        } catch (IOException e) {
            System.out.println("Error saving data: " + e.getMessage());
        }
    }

    private void loadData() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(DATA_FILE))) {
            Bank loadedBank = (Bank) ois.readObject();
            this.accounts = loadedBank.accounts;
            this.nextAccountNumber = loadedBank.nextAccountNumber;
            System.out.println("Previous data loaded successfully.");
        } catch (FileNotFoundException e) {
            System.out.println("No previous data found. Starting fresh.");
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error loading data: " + e.getMessage());
        }
    }

    public void shutdown() {
        saveData();
        System.out.println("Thank you for using our Banking System!");
    }
}

// Main Banking Application
public class BankingApplication {
    private static Bank bank = new Bank();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("üè¶ Welcome to Digital Banking System");
        System.out.println("=====================================");

        while (true) {
            displayMainMenu();
            int choice = getIntegerInput("Enter your choice: ");

            switch (choice) {
                case 1: createAccountMenu(); break;
                case 2: customerLoginMenu(); break;
                case 3: adminMenu(); break;
                case 4:
                    bank.shutdown();
                    System.exit(0);
                    break;
                default:
                    System.out.println("‚ùå Invalid choice! Please try again.");
            }
        }
    }

    private static void displayMainMenu() {
        System.out.println("\n" + "=".repeat(40));
        System.out.println("            MAIN MENU");
        System.out.println("=".repeat(40));
        System.out.println("1. Create New Account");
        System.out.println("2. Customer Login");
        System.out.println("3. Admin Panel");
        System.out.println("4. Exit");
        System.out.println("=".repeat(40));
    }

    private static void createAccountMenu() {
        System.out.println("\n" + "=".repeat(40));
        System.out.println("        CREATE NEW ACCOUNT");
        System.out.println("=".repeat(40));

        System.out.print("Enter Full Name: ");
        String name = scanner.nextLine();

        System.out.print("Enter Mobile Number: ");
        String mobile = scanner.nextLine();

        System.out.print("Enter Gender (M/F/O): ");
        String gender = scanner.nextLine();

        System.out.print("Create Password: ");
        String password = scanner.nextLine();

        double initialBalance = getDoubleInput("Enter Initial Deposit (minimum ‚Çπ500): ");

        if (initialBalance < 500) {
            System.out.println("‚ùå Minimum deposit amount is ‚Çπ500!");
            return;
        }

        bank.createAccount(name, mobile, gender, password, initialBalance);
    }

    private static void customerLoginMenu() {
        System.out.println("\n" + "=".repeat(40));
        System.out.println("         CUSTOMER LOGIN");
        System.out.println("=".repeat(40));

        int accountNumber = getIntegerInput("Enter Account Number: ");
        System.out.print("Enter Password: ");
        String password = scanner.nextLine();

        Account account = bank.login(accountNumber, password);
        if (account == null) {
            System.out.println("‚ùå Invalid account number or password!");
            return;
        }

        System.out.println("‚úÖ Login successful! Welcome, " + account.getName());
        customerDashboard(account);
    }

    private static void customerDashboard(Account account) {
        while (true) {
            System.out.println("\n" + "=".repeat(50));
            System.out.println("           CUSTOMER DASHBOARD");
            System.out.println("Account: " + account.getAccountNumber() + " | " + account.getName());
            System.out.println("=".repeat(50));
            System.out.println("1. Check Balance");
            System.out.println("2. Deposit Money");
            System.out.println("3. Withdraw Money");
            System.out.println("4. Transfer Funds");
            System.out.println("5. Transaction History");
            System.out.println("6. Account Details");
            System.out.println("7. Logout");
            System.out.println("=".repeat(50));

            int choice = getIntegerInput("Enter your choice: ");

            switch (choice) {
                case 1: checkBalance(account); break;
                case 2: depositMoney(account); break;
                case 3: withdrawMoney(account); break;
                case 4: transferFunds(account); break;
                case 5: showTransactionHistory(account); break;
                case 6: showAccountDetails(account); break;
                case 7:
                    System.out.println("‚úÖ Logged out successfully!");
                    return;
                default:
                    System.out.println("‚ùå Invalid choice! Please try again.");
            }
        }
    }

    private static void checkBalance(Account account) {
        System.out.println("\nüí∞ Current Balance: ‚Çπ" + String.format("%.2f", account.getBalance()));
    }

    private static void depositMoney(Account account) {
        double amount = getDoubleInput("Enter deposit amount: ‚Çπ");
        if (account.deposit(amount)) {
            System.out.println("‚úÖ ‚Çπ" + amount + " deposited successfully!");
            System.out.println("New Balance: ‚Çπ" + account.getBalance());
            bank.shutdown(); // Save data
        }
    }

    private static void withdrawMoney(Account account) {
        double amount = getDoubleInput("Enter withdrawal amount: ‚Çπ");
        if (account.withdraw(amount)) {
            System.out.println("‚úÖ ‚Çπ" + amount + " withdrawn successfully!");
            System.out.println("Remaining Balance: ‚Çπ" + account.getBalance());
            bank.shutdown(); // Save data
        }
    }

    private static void transferFunds(Account fromAccount) {
        int toAccountNumber = getIntegerInput("Enter recipient account number: ");
        Account toAccount = bank.findAccount(toAccountNumber);

        if (toAccount == null) {
            System.out.println("‚ùå Recipient account not found!");
            return;
        }

        if (toAccount.getAccountNumber() == fromAccount.getAccountNumber()) {
            System.out.println("‚ùå Cannot transfer to the same account!");
            return;
        }

        System.out.println("Recipient: " + toAccount.getName());
        double amount = getDoubleInput("Enter transfer amount: ‚Çπ");

        if (fromAccount.transfer(amount, toAccount)) {
            System.out.println("‚úÖ ‚Çπ" + amount + " transferred successfully to " + toAccount.getName());
            System.out.println("Your remaining balance: ‚Çπ" + fromAccount.getBalance());
            bank.shutdown(); // Save data
        }
    }

    private static void showTransactionHistory(Account account) {
        List<Transaction> history = account.getTransactionHistory();

        if (history.isEmpty()) {
            System.out.println("No transactions found!");
            return;
        }

        System.out.println("\n" + "=".repeat(80));
        System.out.println("                           TRANSACTION HISTORY");
        System.out.println("=".repeat(80));
        System.out.println("TYPE         | AMOUNT     | DATE & TIME         | DESCRIPTION");
        System.out.println("-".repeat(80));

        for (int i = history.size() - 1; i >= Math.max(0, history.size() - 10); i--) {
            System.out.println(history.get(i));
        }

        System.out.println("=".repeat(80));
        System.out.println("Showing last " + Math.min(10, history.size()) + " transactions");
    }

    private static void showAccountDetails(Account account) {
        System.out.println("\n" + "=".repeat(50));
        System.out.println("              ACCOUNT DETAILS");
        System.out.println("=".repeat(50));
        System.out.println("Account Number  : " + account.getAccountNumber());
        System.out.println("Account Holder  : " + account.getName());
        System.out.println("Mobile Number   : " + account.getMobile());
        System.out.println("Gender          : " + account.getGender());
        System.out.println("Current Balance : ‚Çπ" + String.format("%.2f", account.getBalance()));
        System.out.println("Account Created : " + account.getCreatedDate().format(
                DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss")));
        System.out.println("Total Transactions: " + account.getTransactionHistory().size());
        System.out.println("=".repeat(50));
    }

    private static void adminMenu() {
        System.out.print("Enter Admin Password: ");
        String password = scanner.nextLine();

        if (!bank.adminLogin(password)) {
            System.out.println("‚ùå Invalid admin password!");
            return;
        }

        while (true) {
            System.out.println("\n" + "=".repeat(40));
            System.out.println("           ADMIN PANEL");
            System.out.println("=".repeat(40));
            System.out.println("1. View All Accounts");
            System.out.println("2. Calculate Interest for All");
            System.out.println("3. Search Account");
            System.out.println("4. Back to Main Menu");
            System.out.println("=".repeat(40));

            int choice = getIntegerInput("Enter your choice: ");

            switch (choice) {
                case 1: bank.displayAllAccounts(); break;
                case 2:
                    double rate = getDoubleInput("Enter interest rate (%): ");
                    bank.calculateInterestForAll(rate);
                    break;
                case 3: searchAccount(); break;
                case 4: return;
                default:
                    System.out.println("‚ùå Invalid choice! Please try again.");
            }
        }
    }

    private static void searchAccount() {
        int accountNumber = getIntegerInput("Enter account number to search: ");
        Account account = bank.findAccount(accountNumber);

        if (account == null) {
            System.out.println("‚ùå Account not found!");
            return;
        }

        showAccountDetails(account);
    }

    // Utility methods for input validation
    private static int getIntegerInput(String prompt) {
        while (true) {
            try {
                System.out.print(prompt);
                int value = Integer.parseInt(scanner.nextLine());
                return value;
            } catch (NumberFormatException e) {
                System.out.println("‚ùå Please enter a valid number!");
            }
        }
    }

    private static double getDoubleInput(String prompt) {
        while (true) {
            try {
                System.out.print(prompt);
                double value = Double.parseDouble(scanner.nextLine());
                return value;
            } catch (NumberFormatException e) {
                System.out.println("‚ùå Please enter a valid amount!");
            }
        }
    }
}
